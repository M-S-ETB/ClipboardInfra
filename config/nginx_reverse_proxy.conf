worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;


    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    upstream clipboard_client {
        server clipboard-client:3200;
        # server 192.168.0.218:3400;
    }

    upstream clipboard_api {
        server clipboard-api:3100;
        # server 192.168.0.218:3100;
    }

    upstream clipboard_grafana {
        server clipboard-grafana:3000;
    }

    upstream clipboard_message_queue {
        server clipboard-message-queue:15672;
    }

    upstream clipboard_redis_cache {
        server clipboard-redis-cache:8001;
    }
	
    # Add CORS headers for all responses
#    add_header 'Access-Control-Allow-Origin' * always;
#    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
#    add_header 'Access-Control-Allow-Headers' 'Content-Type,Authorization' always;

    server {
        listen 3201 ssl;
        listen [::]:3201 ssl;
        server_name clipboard.internal.etb;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';


        # Proxy Grafana at /grafana
        location /grafana/ {
            # Extra Info!!!
            # Grafana needs the path configured in grafana.ini as root_url
            # make sure it always matches what is configured here

            rewrite ^/grafana(/.*)$ $1 break;  # Remove prefix from the path
            proxy_pass http://clipboard_grafana;  # Proxy to Grafana
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }

        # Proxy NestJS API (HTTP + WebSocket traffic) at /api
        location /api {
            rewrite ^/api(/.*)$ $1 break;  # Remove '/api' from the path
            proxy_pass http://clipboard_api;  # Proxy to NestJS backend
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;

            # Add CORS headers for requests passing through Nginx
            add_header Access-Control-Allow-Origin *;  # Or replace '*' with specific origin(s)
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";

            # Optional: Increase timeout limits for WebSocket connections (if needed)
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        location /redis-insight/ {
            # path rewriting is apparently not supported in redisInsight, see https://redis.io/docs/latest/operate/redisinsight/proxy/
            # rewrite ^/redis-insight(/.*)$ $1 break;  # Remove '/redis-insight' from the path
            proxy_pass http://clipboard_redis_cache;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }

        location /message-queue {
            rewrite ^/message-queue(/.*)$ $1 break;  # Remove '/message-queue' from the path
            proxy_pass http://clipboard_message_queue;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            proxy_pass http://clipboard_client;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }

        # optional config mounting. the client already has the config at the same location, so this isn't necessary.
        #location = /config.json {
        #    alias "/usr/share/nginx/html/config.json";
        #    add_header Content-Type application/json;
        #}
    }
    server {
        listen 3500;
        listen [::]:3500;
        server_name clipboard.internal.etb;

        # Proxy Grafana at /grafana
        location /grafana/ {
            # Extra Info!!!
            # Grafana needs the path configured in grafana.ini as root_url
            # make sure it always matches what is configured here

            rewrite ^/grafana(/.*)$ $1 break;  # Remove prefix from the path
            proxy_pass http://clipboard_grafana;  # Proxy to Grafana
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }

        # Proxy NestJS API (HTTP + WebSocket traffic) at /api
        location /api {
            rewrite ^/api(/.*)$ $1 break;  # Remove '/api' from the path
            proxy_pass http://clipboard_api;  # Proxy to NestJS backend
            proxy_http_version 1.1;

            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;

            # Add CORS headers for requests passing through Nginx
            add_header Access-Control-Allow-Origin *;  # Or replace '*' with specific origin(s)
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
            add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization";

            # Optional: Increase timeout limits for WebSocket connections (if needed)
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        location /redis-insight {
            # path rewriting is apparently not supported in redisInsight, see https://redis.io/docs/latest/operate/redisinsight/proxy/
            # rewrite ^/redis-insight(/.*)$ $1 break;  # Remove '/redis-insight' from the path
            proxy_pass http://clipboard_redis_cache;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }

        location /message-queue {
            rewrite ^/message-queue(/.*)$ $1 break;  # Remove '/message-queue' from the path
            proxy_pass http://clipboard_message_queue;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            proxy_pass http://clipboard_client;

            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_set_header Host $host;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }
    }
}
